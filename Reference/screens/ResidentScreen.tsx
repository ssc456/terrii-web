import { useState } from 'react';
import { Button } from '../ui/button';
import { Input } from '../ui/input';
import { Textarea } from '../ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';
import { Badge } from '../ui/badge';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '../ui/dialog';
import { Label } from '../ui/label';
import { ResidentCard } from '../ResidentCard';
import { Search, Filter, Plus, SortAsc, Users, AlertCircle, CheckCircle, Clock } from 'lucide-react';

interface ResidentsScreenProps {
  onViewProfile: (residentId: string) => void;
  onSendMessage: (residentId: string) => void;
  onQuickUpdate: (residentId: string) => void;
  onAddResident?: (residentData: any) => void;
}

export function ResidentsScreen({ 
  onViewProfile, 
  onSendMessage, 
  onQuickUpdate,
  onAddResident 
}: ResidentsScreenProps) {
  const [searchQuery, setSearchQuery] = useState('');
  const [filterStatus, setFilterStatus] = useState('all');
  const [sortBy, setSortBy] = useState('name');
  const [showAddDialog, setShowAddDialog] = useState(false);
  const [showQuickUpdate, setShowQuickUpdate] = useState(false);
  const [selectedResidentForUpdate, setSelectedResidentForUpdate] = useState<string | null>(null);

  // Add resident form state
  const [newResident, setNewResident] = useState({
    name: '',
    room: '',
    dateOfBirth: '',
    admissionDate: '',
    emergencyContactName: '',
    emergencyContactPhone: '',
    emergencyContactEmail: '',
    emergencyContactRelationship: '',
    medicalConditions: '',
    medications: '',
    allergies: '',
    dietaryRestrictions: '',
    interests: '',
    communicationNotes: '',
    mobilityNotes: ''
  });

  // Quick update form state
  const [updateData, setUpdateData] = useState({
    activity: '',
    notes: '',
    mood: '',
    healthStatus: '',
    familyNotified: false
  });

  // Mock data - in real app, this would come from API
  const residents = [
    {
      id: '1',
      name: 'Margaret Thompson',
      room: '101A',
      photo: 'https://images.unsplash.com/photo-1559839734-2b71ea197ec2?w=400&h=400&fit=crop&crop=face',
      lastUpdate: '2 hours ago',
      status: 'updated' as const,
      unreadMessages: 0,
    },
    {
      id: '2',
      name: 'James Mitchell',
      room: '102B',
      lastUpdate: '1 day ago',
      status: 'needs-update' as const,
      unreadMessages: 2,
    },
    {
      id: '3',
      name: 'Dorothy Williams',
      room: '103A',
      photo: 'https://images.unsplash.com/photo-1554151228-14d9def656e4?w=400&h=400&fit=crop&crop=face',
      lastUpdate: '3 days ago',
      status: 'overdue' as const,
      unreadMessages: 1,
    },
    {
      id: '4',
      name: 'Robert Chen',
      room: '104B',
      photo: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=400&h=400&fit=crop&crop=face',
      lastUpdate: '4 hours ago',
      status: 'updated' as const,
      unreadMessages: 0,
    },
    {
      id: '5',
      name: 'Eleanor Rodriguez',
      room: '105A',
      lastUpdate: '2 days ago',
      status: 'needs-update' as const,
      unreadMessages: 3,
    },
  ];

  const filteredResidents = residents.filter(resident => {
    const matchesSearch = resident.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         resident.room.toLowerCase().includes(searchQuery.toLowerCase());
    const matchesStatus = filterStatus === 'all' || resident.status === filterStatus;
    return matchesSearch && matchesStatus;
  });

  const sortedResidents = [...filteredResidents].sort((a, b) => {
    switch (sortBy) {
      case 'name':
        return a.name.localeCompare(b.name);
      case 'room':
        return a.room.localeCompare(b.room);
      case 'status':
        const statusOrder = { 'overdue': 0, 'needs-update': 1, 'updated': 2 };
        return statusOrder[a.status] - statusOrder[b.status];
      default:
        return 0;
    }
  });

  const getStatusCount = (status: string) => {
    return residents.filter(r => r.status === status).length;
  };

  const handleAddResident = () => {
    if (newResident.name && newResident.room) {
      const residentData = {
        ...newResident,
        id: Date.now().toString(), // In real app, would be generated by backend
        status: 'updated',
        lastUpdate: 'just now',
        unreadMessages: 0
      };
      
      if (onAddResident) {
        onAddResident(residentData);
      }
      
      console.log('Adding new resident:', residentData);
      
      // Reset form
      setNewResident({
        name: '',
        room: '',
        dateOfBirth: '',
        admissionDate: '',
        emergencyContactName: '',
        emergencyContactPhone: '',
        emergencyContactEmail: '',
        emergencyContactRelationship: '',
        medicalConditions: '',
        medications: '',
        allergies: '',
        dietaryRestrictions: '',
        interests: '',
        communicationNotes: '',
        mobilityNotes: ''
      });
      
      setShowAddDialog(false);
    }
  };

  const handleQuickUpdateSubmit = () => {
    if (selectedResidentForUpdate && updateData.activity) {
      console.log('Quick update for resident:', selectedResidentForUpdate, updateData);
      onQuickUpdate(selectedResidentForUpdate);
      
      // Reset form
      setUpdateData({
        activity: '',
        notes: '',
        mood: '',
        healthStatus: '',
        familyNotified: false
      });
      
      setShowQuickUpdate(false);
      setSelectedResidentForUpdate(null);
    }
  };

  const handleQuickUpdateClick = (residentId: string) => {
    setSelectedResidentForUpdate(residentId);
    setShowQuickUpdate(true);
  };

  const handleStatusCardClick = (status: string) => {
    setFilterStatus(status);
  };

  const selectedResidentForUpdateData = residents.find(r => r.id === selectedResidentForUpdate);

  return (
    <div className="h-full bg-terrii-blue/10">
      <div className="p-4 space-y-4">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-2xl font-semibold text-terrii-text-primary">Residents</h1>
            <p className="text-terrii-text-secondary">Manage resident information and updates</p>
          </div>
          
          <Dialog open={showAddDialog} onOpenChange={setShowAddDialog}>
            <DialogTrigger asChild>
              <Button
                size="sm"
                className="bg-terrii-green-dark hover:bg-terrii-green text-terrii-text-primary"
              >
                <Plus className="h-4 w-4 mr-2" />
                Add Resident
              </Button>
            </DialogTrigger>
            <DialogContent className="max-w-3xl max-h-[90vh] overflow-y-auto">
              <DialogHeader>
                <DialogTitle>Add New Resident</DialogTitle>
                <DialogDescription>
                  Enter the resident's information to create their profile.
                </DialogDescription>
              </DialogHeader>
              
              <div className="space-y-6">
                {/* Basic Information */}
                <div>
                  <h3 className="font-medium text-terrii-text-primary mb-3">Basic Information</h3>
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <Label htmlFor="name">Full Name *</Label>
                      <Input
                        id="name"
                        value={newResident.name}
                        onChange={(e) => setNewResident({...newResident, name: e.target.value})}
                        placeholder="Enter full name"
                      />
                    </div>
                    <div>
                      <Label htmlFor="room">Room Number *</Label>
                      <Input
                        id="room"
                        value={newResident.room}
                        onChange={(e) => setNewResident({...newResident, room: e.target.value})}
                        placeholder="e.g., 101A"
                      />
                    </div>
                    <div>
                      <Label htmlFor="dob">Date of Birth</Label>
                      <Input
                        id="dob"
                        type="date"
                        value={newResident.dateOfBirth}
                        onChange={(e) => setNewResident({...newResident, dateOfBirth: e.target.value})}
                      />
                    </div>
                    <div>
                      <Label htmlFor="admission">Admission Date</Label>
                      <Input
                        id="admission"
                        type="date"
                        value={newResident.admissionDate}
                        onChange={(e) => setNewResident({...newResident, admissionDate: e.target.value})}
                      />
                    </div>
                  </div>
                </div>

                {/* Emergency Contact */}
                <div>
                  <h3 className="font-medium text-terrii-text-primary mb-3">Emergency Contact</h3>
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <Label htmlFor="emergency-name">Contact Name</Label>
                      <Input
                        id="emergency-name"
                        value={newResident.emergencyContactName}
                        onChange={(e) => setNewResident({...newResident, emergencyContactName: e.target.value})}
                        placeholder="Full name"
                      />
                    </div>
                    <div>
                      <Label htmlFor="emergency-relationship">Relationship</Label>
                      <Select
                        value={newResident.emergencyContactRelationship}
                        onValueChange={(value) => setNewResident({...newResident, emergencyContactRelationship: value})}
                      >
                        <SelectTrigger>
                          <SelectValue placeholder="Select relationship" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="spouse">Spouse</SelectItem>
                          <SelectItem value="daughter">Daughter</SelectItem>
                          <SelectItem value="son">Son</SelectItem>
                          <SelectItem value="parent">Parent</SelectItem>
                          <SelectItem value="sibling">Sibling</SelectItem>
                          <SelectItem value="friend">Friend</SelectItem>
                          <SelectItem value="other">Other</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    <div>
                      <Label htmlFor="emergency-phone">Phone Number</Label>
                      <Input
                        id="emergency-phone"
                        value={newResident.emergencyContactPhone}
                        onChange={(e) => setNewResident({...newResident, emergencyContactPhone: e.target.value})}
                        placeholder="+1 (555) 123-4567"
                      />
                    </div>
                    <div>
                      <Label htmlFor="emergency-email">Email</Label>
                      <Input
                        id="emergency-email"
                        type="email"
                        value={newResident.emergencyContactEmail}
                        onChange={(e) => setNewResident({...newResident, emergencyContactEmail: e.target.value})}
                        placeholder="email@example.com"
                      />
                    </div>
                  </div>
                </div>

                {/* Medical Information */}
                <div>
                  <h3 className="font-medium text-terrii-text-primary mb-3">Medical Information</h3>
                  <div className="space-y-4">
                    <div>
                      <Label htmlFor="conditions">Medical Conditions</Label>
                      <Textarea
                        id="conditions"
                        value={newResident.medicalConditions}
                        onChange={(e) => setNewResident({...newResident, medicalConditions: e.target.value})}
                        placeholder="List any medical conditions (e.g., Dementia, Hypertension)"
                      />
                    </div>
                    <div>
                      <Label htmlFor="medications">Current Medications</Label>
                      <Textarea
                        id="medications"
                        value={newResident.medications}
                        onChange={(e) => setNewResident({...newResident, medications: e.target.value})}
                        placeholder="List medications with dosages and timing"
                      />
                    </div>
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <Label htmlFor="allergies">Allergies</Label>
                        <Input
                          id="allergies"
                          value={newResident.allergies}
                          onChange={(e) => setNewResident({...newResident, allergies: e.target.value})}
                          placeholder="e.g., Penicillin, Shellfish"
                        />
                      </div>
                      <div>
                        <Label htmlFor="dietary">Dietary Restrictions</Label>
                        <Input
                          id="dietary"
                          value={newResident.dietaryRestrictions}
                          onChange={(e) => setNewResident({...newResident, dietaryRestrictions: e.target.value})}
                          placeholder="e.g., Low sodium, Diabetic-friendly"
                        />
                      </div>
                    </div>
                  </div>
                </div>

                {/* Care Preferences */}
                <div>
                  <h3 className="font-medium text-terrii-text-primary mb-3">Care Preferences</h3>
                  <div className="space-y-4">
                    <div>
                      <Label htmlFor="interests">Interests & Hobbies</Label>
                      <Input
                        id="interests"
                        value={newResident.interests}
                        onChange={(e) => setNewResident({...newResident, interests: e.target.value})}
                        placeholder="e.g., Art, Music, Gardening, Reading"
                      />
                    </div>
                    <div>
                      <Label htmlFor="communication">Communication Notes</Label>
                      <Textarea
                        id="communication"
                        value={newResident.communicationNotes}
                        onChange={(e) => setNewResident({...newResident, communicationNotes: e.target.value})}
                        placeholder="How the resident prefers to communicate, any special considerations"
                      />
                    </div>
                    <div>
                      <Label htmlFor="mobility">Mobility Notes</Label>
                      <Textarea
                        id="mobility"
                        value={newResident.mobilityNotes}
                        onChange={(e) => setNewResident({...newResident, mobilityNotes: e.target.value})}
                        placeholder="Mobility aids, assistance needed, restrictions"
                      />
                    </div>
                  </div>
                </div>

                {/* Actions */}
                <div className="flex justify-end space-x-2 pt-4 border-t">
                  <Button variant="outline" onClick={() => setShowAddDialog(false)}>
                    Cancel
                  </Button>
                  <Button 
                    onClick={handleAddResident}
                    disabled={!newResident.name || !newResident.room}
                    className="bg-terrii-green-dark hover:bg-terrii-green text-terrii-text-primary"
                  >
                    <Plus className="h-4 w-4 mr-2" />
                    Add Resident
                  </Button>
                </div>
              </div>
            </DialogContent>
          </Dialog>
        </div>

        {/* Status Summary */}
        <div className="grid grid-cols-3 gap-4">
          <div 
            className="bg-white p-3 rounded-lg shadow-terrii hover:shadow-terrii-lg transition-shadow cursor-pointer"
            onClick={() => handleStatusCardClick('updated')}
          >
            <div className="text-center">
              <div className="flex items-center justify-center mb-2">
                <CheckCircle className="h-6 w-6 text-terrii-success" />
              </div>
              <div className="text-2xl font-bold text-terrii-success">{getStatusCount('updated')}</div>
              <div className="text-sm text-terrii-text-secondary">Up to date</div>
            </div>
          </div>
          <div 
            className="bg-white p-3 rounded-lg shadow-terrii hover:shadow-terrii-lg transition-shadow cursor-pointer"
            onClick={() => handleStatusCardClick('needs-update')}
          >
            <div className="text-center">
              <div className="flex items-center justify-center mb-2">
                <Clock className="h-6 w-6 text-terrii-warning" />
              </div>
              <div className="text-2xl font-bold text-terrii-warning">{getStatusCount('needs-update')}</div>
              <div className="text-sm text-terrii-text-secondary">Need update</div>
            </div>
          </div>
          <div 
            className="bg-white p-3 rounded-lg shadow-terrii hover:shadow-terrii-lg transition-shadow cursor-pointer"
            onClick={() => handleStatusCardClick('overdue')}
          >
            <div className="text-center">
              <div className="flex items-center justify-center mb-2">
                <AlertCircle className="h-6 w-6 text-terrii-error" />
              </div>
              <div className="text-2xl font-bold text-terrii-error">{getStatusCount('overdue')}</div>
              <div className="text-sm text-terrii-text-secondary">Overdue</div>
            </div>
          </div>
        </div>

        {/* Search and Filters */}
        <div className="space-y-3">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-terrii-text-light" />
            <Input
              placeholder="Search residents by name or room..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="pl-10"
            />
          </div>
          
          <div className="flex items-center space-x-2">
            <Select value={filterStatus} onValueChange={setFilterStatus}>
              <SelectTrigger className="w-40">
                <SelectValue placeholder="Filter by status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Residents</SelectItem>
                <SelectItem value="updated">Up to date</SelectItem>
                <SelectItem value="needs-update">Needs update</SelectItem>
                <SelectItem value="overdue">Overdue</SelectItem>
              </SelectContent>
            </Select>
            
            <Select value={sortBy} onValueChange={setSortBy}>
              <SelectTrigger className="w-40">
                <SelectValue placeholder="Sort by" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="name">Name</SelectItem>
                <SelectItem value="room">Room</SelectItem>
                <SelectItem value="status">Status</SelectItem>
              </SelectContent>
            </Select>

            {filterStatus !== 'all' && (
              <Button
                variant="outline"
                size="sm"
                onClick={() => setFilterStatus('all')}
              >
                Clear Filter
              </Button>
            )}

            <Badge variant="outline" className="bg-terrii-info/20 text-terrii-info">
              {sortedResidents.length} Residents
            </Badge>
          </div>
        </div>

        {/* Residents List */}
        <div className="space-y-3">
          {sortedResidents.length === 0 ? (
            <div className="text-center py-12">
              <Users className="h-16 w-16 text-terrii-text-light mx-auto mb-4" />
              <h3 className="text-lg font-medium text-terrii-text-primary mb-2">No residents found</h3>
              <p className="text-terrii-text-secondary mb-4">
                {searchQuery || filterStatus !== 'all' 
                  ? 'Try adjusting your search criteria or filters.' 
                  : 'Start by adding your first resident to the system.'
                }
              </p>
              {!searchQuery && filterStatus === 'all' && (
                <Button 
                  onClick={() => setShowAddDialog(true)}
                  className="bg-terrii-green-dark hover:bg-terrii-green text-terrii-text-primary"
                >
                  <Plus className="h-4 w-4 mr-2" />
                  Add First Resident
                </Button>
              )}
            </div>
          ) : (
            sortedResidents.map((resident) => (
              <ResidentCard
                key={resident.id}
                resident={resident}
                onViewProfile={onViewProfile}
                onSendMessage={onSendMessage}
                onQuickUpdate={handleQuickUpdateClick}
              />
            ))
          )}
        </div>

        {/* Quick Update Dialog */}
        <Dialog open={showQuickUpdate} onOpenChange={setShowQuickUpdate}>
          <DialogContent className="max-w-2xl">
            <DialogHeader>
              <DialogTitle>Quick Update</DialogTitle>
              <DialogDescription>
                Add a quick update for {selectedResidentForUpdateData?.name}
              </DialogDescription>
            </DialogHeader>
            
            <div className="space-y-4">
              <div>
                <Label htmlFor="activity">Activity/Event</Label>
                <Select value={updateData.activity} onValueChange={(value) => setUpdateData({...updateData, activity: value})}>
                  <SelectTrigger>
                    <SelectValue placeholder="What happened today?" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="art-therapy">Art Therapy</SelectItem>
                    <SelectItem value="music-therapy">Music Therapy</SelectItem>
                    <SelectItem value="physical-therapy">Physical Therapy</SelectItem>
                    <SelectItem value="social-time">Social Time</SelectItem>
                    <SelectItem value="meal-time">Meal Time</SelectItem>
                    <SelectItem value="medical-visit">Medical Visit</SelectItem>
                    <SelectItem value="family-visit">Family Visit</SelectItem>
                    <SelectItem value="other">Other Activity</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div>
                <Label htmlFor="notes">Notes</Label>
                <Textarea
                  id="notes"
                  value={updateData.notes}
                  onChange={(e) => setUpdateData({...updateData, notes: e.target.value})}
                  placeholder="Describe what happened, how the resident responded, any notable observations..."
                  className="min-h-[100px]"
                />
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="mood">Mood/Demeanor</Label>
                  <Select value={updateData.mood} onValueChange={(value) => setUpdateData({...updateData, mood: value})}>
                    <SelectTrigger>
                      <SelectValue placeholder="How were they today?" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="excellent">Excellent</SelectItem>
                      <SelectItem value="good">Good</SelectItem>
                      <SelectItem value="fair">Fair</SelectItem>
                      <SelectItem value="challenging">Challenging</SelectItem>
                      <SelectItem value="varies">Varied throughout day</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                
                <div>
                  <Label htmlFor="health">Health Status</Label>
                  <Select value={updateData.healthStatus} onValueChange={(value) => setUpdateData({...updateData, healthStatus: value})}>
                    <SelectTrigger>
                      <SelectValue placeholder="Any health notes?" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="normal">Normal/Stable</SelectItem>
                      <SelectItem value="improved">Improved</SelectItem>
                      <SelectItem value="minor-concern">Minor Concern</SelectItem>
                      <SelectItem value="needs-attention">Needs Attention</SelectItem>
                      <SelectItem value="emergency">Emergency</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="flex items-center space-x-2">
                <input
                  type="checkbox"
                  id="family-notified"
                  checked={updateData.familyNotified}
                  onChange={(e) => setUpdateData({...updateData, familyNotified: e.target.checked})}
                  className="rounded border-border"
                />
                <Label htmlFor="family-notified">Family has been notified of this update</Label>
              </div>

              <div className="flex justify-end space-x-2 pt-4">
                <Button variant="outline" onClick={() => setShowQuickUpdate(false)}>
                  Cancel
                </Button>
                <Button 
                  onClick={handleQuickUpdateSubmit}
                  disabled={!updateData.activity || !updateData.notes}
                  className="bg-terrii-green-dark hover:bg-terrii-green text-terrii-text-primary"
                >
                  Save Update
                </Button>
              </div>
            </div>
          </DialogContent>
        </Dialog>
      </div>
    </div>
  );
}